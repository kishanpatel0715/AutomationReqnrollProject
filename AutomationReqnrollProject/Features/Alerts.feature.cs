// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace AutomationReqnrollProject.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Alerts")]
    [NUnit.Framework.CategoryAttribute("Alerts")]
    public partial class AlertsFeature
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = new string[] {
                "Alerts"};
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Alerts", "This feature file covers the Alert scenarios", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
#line 1 "Alerts.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
            {
                await testRunner.OnFeatureEndAsync();
            }
            if ((testRunner.FeatureContext == null))
            {
                await testRunner.OnFeatureStartAsync(featureInfo);
            }
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("TC:423459 Verify alert")]
        public async System.Threading.Tasks.Task TC423459VerifyAlert()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("TC:423459 Verify alert", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 5
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
  await testRunner.WhenAsync("user navigates to the Alerts, Frame & Windows page page", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 7
  await testRunner.AndAsync("user clicks on button to see alert", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 8
     await testRunner.ThenAsync("alert is displayed with text \"You clicked a button\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 9
  await testRunner.WhenAsync("user accepts the alert", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 10
  await testRunner.ThenAsync("alert is disappeared", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("TC:523459 Verify alert appeares after 5 seconds")]
        public async System.Threading.Tasks.Task TC523459VerifyAlertAppearesAfter5Seconds()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("TC:523459 Verify alert appeares after 5 seconds", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 12
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 13
  await testRunner.WhenAsync("user navigates to the Alerts, Frame & Windows page page", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 14
  await testRunner.AndAsync("user clicks on button to see delayed alert", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 15
     await testRunner.ThenAsync("delayed alert is displayed with text \"This alert appeared after 5 seconds\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 16
  await testRunner.WhenAsync("user accepts the alert", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 17
  await testRunner.ThenAsync("alert is disappeared", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("TC:623459 Verify cancel action for confirm box")]
        public async System.Threading.Tasks.Task TC623459VerifyCancelActionForConfirmBox()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("TC:623459 Verify cancel action for confirm box", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 19
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 20
  await testRunner.WhenAsync("user navigates to the Alerts, Frame & Windows page page", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 21
  await testRunner.AndAsync("user clicks on button to see confirm box", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 22
  await testRunner.ThenAsync("alert is displayed with text \"Do you confirm action?\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 23
  await testRunner.WhenAsync("user cancels the alert", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 24
  await testRunner.ThenAsync("alert is disappeared", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 25
  await testRunner.AndAsync("\"You selected Cancel\" message is displayed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("TC:723459 Verify prompt alert")]
        public async System.Threading.Tasks.Task TC723459VerifyPromptAlert()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("TC:723459 Verify prompt alert", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 27
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 28
  await testRunner.WhenAsync("user navigates to the Alerts, Frame & Windows page page", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 29
  await testRunner.AndAsync("user clicks on button to see prompt box", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 30
  await testRunner.ThenAsync("alert is displayed with text \"Please enter your name\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 31
  await testRunner.WhenAsync("user enters the name \"Kishan Patel\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 32
  await testRunner.AndAsync("user accepts the alert", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 33
  await testRunner.ThenAsync("\"You entered Kishan Patel\" message is displayed", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
